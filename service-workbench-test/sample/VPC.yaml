Description:  CF for VPC in spoke accounts
Parameters:
  CreateS3Bucket:
    Type: String
    AllowedValues:
    - 'Yes'
    - 'No'
    Default: 'Yes'
  CreateApplicationLoadBalancer:
    Type: String
    AllowedValues:
    - 'Yes'
    - 'No'
    Default: 'No'
  Network:
    Type: String
    AllowedValues:
     - 'Public-via-InternetGateWay'
     - 'Private-via-TransitGateway'
    Default: 'Private-via-TransitGateway'
  project:
    Description:  project tag must match the account where it is launched. This enables to retrieve from AWS Secrets Manager 1) Okta Advancd server access token to enable ssh into ec2, 2) VPC, subnet and Security group configuration, 3) Qualys agent if at HMS and Endgame agent if at BCH, 4) department tag and 5) group tag
    Type: String
    AllowedValues:
      - 73bdcGenomics
      - 73bdc
      - 73cureSc
      - 73etl
      - 73monitoring
      - 73testAccess
      - 73devOps
      - 59pl
      - 59nlp
      - 59grin
      - 59gic
      - 59covidBastion
      - 59covidAnalysis
      - 59covid
      - 59adept
      - lzprod-network
      - lzprod-gss
      - lzprod-nhanes-dev
      - lzprod-nhanes-prod
      - lzprod-pmsdn-dev
      - lzprod-pmsdn-prod
      - lzprod-neer-dev
      - lzprod-neer-prod
      - lzprod-covid-prod
      - lzprod-galileo-prod
      - lzprod-galileo-dev
      - lzprod-curesc-prod
      - lzprod-curesc-dev
      - lzprod-ssc-dev
      - lzprod-ssc-prod
      - lzprod-bdc-etl-dev
      - lzprod-bdc-app-dev
      - lzprod-ludo-tests
      - lzprod-udn-prod
      - lzprod-udn-dev
      - lzprod-celehs-core
      - bch-pl-lzprod-allbch-prod
      - bch-pl-lzprod-allbch-dev
      - bch-pl-lzprod-gic-prod
      - bch-pl-lzprod-gic-dev
      - bch-pl-lzprod-avl-prod
      - bch-pl-lzprod-avl-dev
      - bch-pl-lzprod-covid-prod
      - bch-pl-lzprod-covid-dev
      - bch-pl-lzprod-rapid19-dev
      - bch-pl-lzprod-rapid19-prod
      - bch-pl-lzprod-quest-dev
      - bch-pl-lzprod-quest-prod
      - bch-pl-lzprod-swb-prod
      - bch-pl-lzprod-swb-dev
      - bch-pl-lzprod-network
      - bch-pl-lzprod-gss
      - bch-pl-lzprod-network
      - 64avl-udn
      - 68avl-jupyterhub
      - 68avlQa
      - 68nhanes
      - 68ssc
    Default: lzprod-nhanes-dev
  group:
    Type: String
    AllowedValues:
      - AvillachLab
      - TimLab
    Default: AvillachLab
  department:
    Type: String
    AllowedValues:
      - DBMI
      - PrecisionLink
    Default: DBMI
  agentQualys:
    Description:  At HMS on 73 and 64 accounts only gor now
    Type: String
    AllowedValues:
      - 1
      - 0
    Default: 1
  agentEndgame:
    Description:  At BCH only
    Type: String
    AllowedValues:
      - 1
      - 0
    Default: 0
  oktaAsaToken:
    Description: for Okta Advanced Access Server
    Type: String
    Default: ""

  DevAwsAccountNumber:
    Type: String
    Default: '536396482909'   #  '536396482909' #nhanes dev
  ProdAwsAccountNumber:
    Type: String
    Default: '380019671721'  #   '380019671721'  #nhanes prod

Conditions: 
  PrivateNetwork: !Equals [ !Ref Network, 'Private-via-TransitGateway' ]   
  PublicNetwork: !Equals [ !Ref Network, 'Public-via-InternetGateWay' ]   
  CreateS3BucketYes: !Equals [ !Ref CreateS3Bucket, 'Yes']
  CreateApplicationLoadBalancerYes: !Equals [ !Ref CreateApplicationLoadBalancer,'Yes']
Mappings: 
  Network: 
    Public-via-InternetGateWay:
      CidrIptcp22: 134.174.0.0/16
      CidrIptcp443: 0.0.0.0/0
      CidrIptcp80: 0.0.0.0/0
    Private-via-TransitGateway:
      CidrIptcp22: 10.0.0.0/8
      CidrIptcp443: 10.0.0.0/8
      CidrIptcp80: 10.0.0.0/8

Resources:
  DHCPOptions:
    Type: AWS::EC2::DHCPOptions
#    DeletionPolicy: Retain
    Properties:
      DomainName: ec2.internal
      DomainNameServers:
        - AmazonProvidedDNS
      Tags:
        - Key: Name
          Value: !Sub ${project}-DHCPOptionsSet

  VPC:
    Type: AWS::EC2::VPC
#    DeletionPolicy: Retain
    Properties:
      CidrBlock: !Sub '{{resolve:secretsmanager:arn:aws:secretsmanager:us-east-1:718952877825:secret:StartCIDR-jf64B1:SecretString:${project}}}.0.0/16'
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub ${project}-VPC

  VPCDHCPOptionsAssociation:
    Type: AWS::EC2::VPCDHCPOptionsAssociation
  #  DeletionPolicy: Retain
    Properties:
      VpcId: !Ref 'VPC'
      DhcpOptionsId: !Ref 'DHCPOptions'


  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Condition: PublicNetwork
#    DeletionPolicy: Retain
    Properties:
      Tags:
        - Key: Network
          Value: !Ref Network
        - Key: Name
          Value: !Sub ${project}-IGW

  
  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Condition: PublicNetwork
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

## Need this ? ####
  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Condition: PublicNetwork
#    DeletionPolicy: Retain
    Properties:
      VpcId: !Ref 'VPC'
      InternetGatewayId: !Ref 'InternetGateway'


  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs  '' ]
      CidrBlock: !Sub '{{resolve:secretsmanager:arn:aws:secretsmanager:us-east-1:718952877825:secret:StartCIDR-jf64B1:SecretString:${project}}}.2.0/24'
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${project} App Subnet AZ1
        - Key: Network
          Value: !Ref Network

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs  '' ]
      CidrBlock: !Sub '{{resolve:secretsmanager:arn:aws:secretsmanager:us-east-1:718952877825:secret:StartCIDR-jf64B1:SecretString:${project}}}.3.0/24'
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${project} App Subnet AZ2
        - Key: Network
          Value: !Ref Network

  #  Network ACL
  NetworkAcl:
    Type: AWS::EC2::NetworkAcl
    DependsOn: VPC
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Join [ "", [ !Ref "AWS::StackName", "-acl" ] ]

  #  Network ACL Rules
  InboundNetworkAclAllowHTTPS:
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: NetworkAcl
    Properties:
      NetworkAclId: !Ref NetworkAcl
      RuleNumber: 100
      Protocol: '6'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '443'
        To: '443'

  InboundNetworkAclAllowHTTP:
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: NetworkAcl
    Properties:
      NetworkAclId: !Ref NetworkAcl
      RuleNumber: 200
      Protocol: '6'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '80'
        To: '80'

  InboundNetworkAclAllowSSH:
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: NetworkAcl
    Properties:
      NetworkAclId: !Ref NetworkAcl
      RuleNumber: 300
      Protocol: '6'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 10.0.0.0/8
      PortRange:
        From: '22'
        To: '22'

  InboundNetworkAclAllowEphemeralLinux:
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: NetworkAcl
    Properties:
      NetworkAclId: !Ref NetworkAcl
      RuleNumber: 400
      Protocol: '6'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '1024'
        To: '65535'

  OutboundNetworkAclAllowHTTP:
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: NetworkAcl
    Properties:
      NetworkAclId: !Ref NetworkAcl
      RuleNumber: 100
      Protocol: "6"
      RuleAction: allow
      Egress: 'true'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '80'
        To: '80'

  OutboundNetworkAclAllowHTTPS:
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: NetworkAcl
    Properties:
      NetworkAclId: !Ref NetworkAcl
      RuleNumber: 200
      Protocol: "6"
      RuleAction: allow
      Egress: 'true'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '443'
        To: '443'

  OutboundNetworkAclAllowSSH:
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: NetworkAcl
    Properties:
      NetworkAclId: !Ref NetworkAcl
      RuleNumber: 300
      Protocol: "6"
      RuleAction: allow
      Egress: 'true'
      CidrBlock: 10.0.0.0/8
      PortRange:
        From: '22'
        To: '22'

  OutboundNetworkAclAllowAll:
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: NetworkAcl
    Properties:
      NetworkAclId: !Ref NetworkAcl
      RuleNumber: 400
      Protocol: "6"
      RuleAction: allow
      Egress: 'true'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '1024'
        To: '65535'

  NetworkAclAssociation1:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    DependsOn:
    - PrivateSubnet1
    - NetworkAcl
    Properties:
      SubnetId:
        !Ref PrivateSubnet1
      NetworkAclId:
        !Ref NetworkAcl

  PrivateSubnetNetworkAclAssociation2:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    DependsOn:
    - PrivateSubnet2
    - NetworkAcl
    Properties:
      SubnetId: !Ref PrivateSubnet2
      NetworkAclId: !Ref NetworkAcl


#### S3 VPC Endpoint ########
  S3VpcEndpoint:
    Type: AWS::EC2::VPCEndpoint
    DependsOn:
    - VPC
    - RouteTable
    Properties:
      PolicyDocument:
        Statement:
        - Action: "*"
          Effect: Allow
          Resource: "*"
          Principal: "*"
      RouteTableIds:
      - !Ref RouteTable
      ServiceName: !Join [ "", [ com.amazonaws., !Ref "AWS::Region", .s3 ] ]
      VpcId: !Ref VPC

########
## RDS DB subnet Group
########
  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties: 
      DBSubnetGroupDescription: String
      DBSubnetGroupName: !Sub DBSubnetGroup-${project}
      SubnetIds: 
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      Tags: 
      - Key: Name
        Value: !Sub ${project} Database Subnet Group


###### IGW present ##########
  NatGateway1EIP:
    Type: AWS::EC2::EIP
    Condition: PublicNetwork
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc

  NatGateway2EIP:
    Type: AWS::EC2::EIP
    Condition: PublicNetwork
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc

  NatGateway1:
    Type: AWS::EC2::NatGateway
    Condition: PublicNetwork
    Properties:
      AllocationId: !GetAtt NatGateway1EIP.AllocationId
      SubnetId: !Ref PrivateSubnet1

  NatGateway2:
    Type: AWS::EC2::NatGateway
    Condition: PublicNetwork    
    Properties:
      AllocationId: !GetAtt NatGateway2EIP.AllocationId
      SubnetId: !Ref PrivateSubnet2

######################################################################

  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${project} Routes


  DefaultRoute:
    Type: AWS::EC2::Route
    Condition: PublicNetwork
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway


######################################################################

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTable
      SubnetId: !Ref PrivateSubnet1


  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTable
      SubnetId: !Ref PrivateSubnet2

  VPCFlowLogsLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    Properties:
      RetentionInDays: 365

  VPCFlowLogsRole:
    Type: AWS::IAM::Role
#    DeletionPolicy: Retain
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W11
            reason: "Allow Resource * for CloudWatch Logs API since the resources are customer defined."
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - vpc-flow-logs.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: LogRolePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:DescribeLogGroups
                  - logs:DescribeLogStreams
                  - logs:PutLogEvents
                Resource: '*'
  VPCFlowLog:
    Type: AWS::EC2::FlowLog
#    DeletionPolicy: Retain
    Properties:
        DeliverLogsPermissionArn: !GetAtt 'VPCFlowLogsRole.Arn'
        LogGroupName: !Ref 'VPCFlowLogsLogGroup'
        ResourceId: !Ref 'VPC'
        ResourceType: VPC
        TrafficType: ALL

  ec2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub ${project} Security Group
      GroupDescription: Allow 80, 443 and LMA 22
      VpcId:
         Ref: VPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: !FindInMap [Network, !Ref Network, CidrIptcp80]
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp: !FindInMap [Network, !Ref Network, CidrIptcp443]
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: !FindInMap [Network, !Ref Network, CidrIptcp22]

      Tags:
        -
          Key: Name
          Value:  !Sub ec2 Security Group ${project}



  RDSSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: A security group that allows inbound access to  MySQL DB instance.
      VpcId:
         Ref: VPC
      SecurityGroupEgress:
        - FromPort: -1
          ToPort: -1
          IpProtocol: '-1'
          Description: ''
          CidrIp: 0.0.0.0/0
      SecurityGroupIngress:
        - FromPort: 3306
          ToPort: 3306
          IpProtocol: tcp
          Description: Allow connections to MySql DB instance
          SourceSecurityGroupId: !Ref ec2SecurityGroup
        - FromPort: 1521
          ToPort: 1521
          IpProtocol: tcp
          Description: Allow connections to Oracle DB instance
          SourceSecurityGroupId: !Ref ec2SecurityGroup         
      GroupName: allow-mysql-oracle-traffic

    # Create secrets in AWS secret manager for project subnetID and SG ID
  Secrets:
    Type: 'AWS::SecretsManager::Secret'
    Properties:
      Name: !Ref project
      Description: Push all secrets in same AWS account at the project
      SecretString: !Sub '{ "SslCertArn":"", "VPC":"${VPC}","PrivateSubnet1":"${PrivateSubnet1}","PrivateSubnet2":"${PrivateSubnet2}","ec2SecurityGroup":"${ec2SecurityGroup}","RDSSecurityGroup":"${RDSSecurityGroup}","DBSubnetGroup":"${DBSubnetGroup}","department":"${department}","group":"${group}","oktaAsaToken":"${oktaAsaToken}","agentQualys":"${agentQualys}","agentEndgame":"${agentEndgame}"}' 
      Tags:
        -
          Key: Name
          Value: !Sub ${project}-secrets


  BucketPolicyEtl:
    Type: 'AWS::S3::BucketPolicy'
    Condition: CreateS3BucketYes
    Properties:
      Bucket: !Ref S3BucketEtl
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              AWS:
              - !Sub arn:aws:iam::${DevAwsAccountNumber}:role/AvillachLabIamInstanceRole
              - !Sub arn:aws:iam::${ProdAwsAccountNumber}:role/AvillachLabIamInstanceRole
              - !Sub arn:aws:iam::${DevAwsAccountNumber}:role/rds-s3-integration-role
              - !Sub arn:aws:iam::${ProdAwsAccountNumber}:role/rds-s3-integration-role
              - !Sub '{{resolve:secretsmanager:arn:aws:secretsmanager:us-east-1:718952877825:secret:master-fWTVY2:SecretString:${project}-SSO_Upload-to-s3}}'

            Action:
            - s3:GetObject
            - s3:PutObject
            - s3:PutObjectAcl
            - s3:ListBucket
            Resource:
            - !Join 
              - ''
              - - !GetAtt S3BucketEtl.Arn
                - '/*'
            - !GetAtt S3BucketEtl.Arn
          - Sid: DenyUnencryptedObjectUploads
            Effect: Deny
            Principal: "*"
            Action: s3:PutObject
            Resource: !Join 
                          - ''
                          - - !GetAtt S3BucketEtl.Arn
                            - '/*'
            Condition:
              StringNotEquals:
                s3:x-amz-server-side-encryption: aws:kms
          - Sid: DenyWrongKMSKey
            Effect: Deny
            Principal: "*"
            Action: s3:PutObject
            Resource:  !Join 
                          - ''
                          - - !GetAtt S3BucketEtl.Arn
                            - '/*'
            Condition:
              StringNotEquals:
                s3:x-amz-server-side-encryption-aws-kms-key-id: !Sub '{{resolve:secretsmanager:arn:aws:secretsmanager:us-east-1:718952877825:secret:master-fWTVY2:SecretString:${project}-kms-s3}}'
          - Sid: DenyNotHTTPS
            Effect: Deny
            Principal: '*'
            Action: '*'
            Resource:  !Join 
                          - ''
                          - - !GetAtt S3BucketEtl.Arn
                            - '/*'
            Condition:
              Bool:
                'aws:SecureTransport': 'false'

  BucketPolicyAccessLogs:
    Type: 'AWS::S3::BucketPolicy'
    Condition: CreateS3BucketYes
    Properties:
      Bucket: !Ref S3BucketAccessLogs
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: DenyNotHTTPS
            Effect: Deny
            NotPrincipal:
              AWS:
                - !Sub 'arn:aws:iam::${AWS::AccountId}:root'
            Action: '*'
            Resource:  !Join 
                          - ''
                          - - !GetAtt S3BucketAccessLogs.Arn
                            - '/*'
            Condition:
              Bool:
                'aws:SecureTransport': 'false'

  S3BucketAccessLogs:
    Type: AWS::S3::Bucket
    Condition: CreateS3BucketYes
    #DeletionPolicy: Retain
    Properties:
      BucketName: !Sub access-logs-avillach-${project}-etl
      AccessControl: 'LogDeliveryWrite'
      BucketEncryption:
        ServerSideEncryptionConfiguration:
        - ServerSideEncryptionByDefault:
            SSEAlgorithm: 'AES256'
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      VersioningConfiguration: 
        Status: Enabled
      Tags:
        - Key: project
          Value: !Ref project

  # Encrypted S3 Bucket for Storage
  S3BucketEtl:
    Type: AWS::S3::Bucket
    Condition: CreateS3BucketYes
    DependsOn: BucketPolicyEtl
    DependsOn: S3BucketAccessLogs    
    #DeletionPolicy: Retain
    Properties:
      BucketName: !Sub avillach-${project}-etl
      BucketEncryption:
        ServerSideEncryptionConfiguration:
        - ServerSideEncryptionByDefault:
            KMSMasterKeyID: !Sub '{{resolve:secretsmanager:arn:aws:secretsmanager:us-east-1:718952877825:secret:master-fWTVY2:SecretString:${project}-kms-s3}}'
            SSEAlgorithm: 'aws:kms'
      LoggingConfiguration:
        DestinationBucketName: !Sub access-logs-avillach-${project}-etl
        LogFilePrefix: !Sub 'logs/'
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      VersioningConfiguration: 
        Status: Enabled
      Tags:
        - Key: project
          Value: !Ref project

### # Lambda to remove ingress / egress default Security Group
  ScheduleLambdaRuns: 
      Type: AWS::Events::Rule
      Properties: 
        Description: "ScheduledRule"
        ScheduleExpression: "rate(5 minutes)"
        State: "ENABLED"
        Targets: 
          - Arn: !GetAtt "RemoveIngressEgressLambda.Arn"
            Id: "TargetFunctionV1"

  PermissionForEventsToInvokeLambda: 
    Type: AWS::Lambda::Permission
    Properties: 
      FunctionName: 
        Ref: RemoveIngressEgressLambda
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: !GetAtt "ScheduleLambdaRuns.Arn"

  RemoveIngressEgressLambdaRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: 'lambda.amazonaws.com'
          Action:
          - 'sts:AssumeRole'
      Path: '/'
      ManagedPolicyArns:
      - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
      Policies:
      - PolicyName: sns
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
            - ec2:DescribeSecurityGroups
            Resource: '*'
          - Effect: Allow
            Action:
            - ec2:RevokeSecurityGroupIngress
            - ec2:RevokeSecurityGroupEgress
            Resource: "*"
          - Effect: Allow
            Action:
            - xray:PutTraceSegments
            - xray:PutTelemetryRecords
            Resource: '*'

  RemoveIngressEgressLambda:
    Type: AWS::Lambda::Function
    Properties:
      Description: Lambda function deleting every rule in the default security group of a VPC
      Code:
        ZipFile: |
            'use strict';
            const aws = require("aws-sdk");
            const ec2 = new aws.EC2();
            
            exports.handler = (event, context) => {
              const defaultSecGroupId = process.env.defaultSecGroupId;
              removeAllRulesFromSecurityGroup(defaultSecGroupId);

              async function removeAllRulesFromSecurityGroup(secGroupId) {

                  try {
                      const secGroups = await ec2.describeSecurityGroups({ GroupIds: [secGroupId] }).promise();

                      const ingressRules = {
                          GroupId: secGroupId,
                          IpPermissions: cleanPermissions(secGroups.SecurityGroups[0].IpPermissions)
                      };
                      const egressRules = {
                          GroupId: secGroupId,
                          IpPermissions: cleanPermissions(secGroups.SecurityGroups[0].IpPermissionsEgress),
                      };

                      if (ingressRules.IpPermissions.length > 0)
                          await ec2.revokeSecurityGroupIngress(ingressRules).promise();
                      if (egressRules.IpPermissions.length > 0)
                          await ec2.revokeSecurityGroupEgress(egressRules).promise();
                  } catch (err) {
                      console.error(err);
                      console.error(event);
                  }
                  return true;
              }

              function cleanPermissions(rowPermissions) {
                  return rowPermissions.map((row) => {
                      const cleanPermission = {};
                      Object.keys(row).forEach((key) => {
                          if (Object.keys(row[key]).length !== 0) {
                              cleanPermission[key] = row[key];
                          }
                      })
                      return cleanPermission;
                  });
              }
            };
      Handler: 'index.handler'
      Environment:
        Variables:
          defaultSecGroupId: !GetAtt "VPC.DefaultSecurityGroup"
      MemorySize: 128
      Role: !GetAtt 'RemoveIngressEgressLambdaRole.Arn'
      Runtime: 'nodejs10.x'
      Timeout: 60
      TracingConfig:
        Mode: Active




Outputs:
  VPC:
    Description: VPC 
    Value: !Ref VPC
  SecurityGroup:
    Value: !Ref ec2SecurityGroup
