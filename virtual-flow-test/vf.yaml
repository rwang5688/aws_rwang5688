AWSTemplateFormatVersion: '2010-09-09'
Description: 'Sample template for launching VirtualFlow in AWS Batch'
Parameters:
  VPCStackParameter:
    Type: String
    Description: Name of the VPC Stack previously deployed
  AMI:
    Description: Default ECS Optimized AMI (AL2) or your own AMI ID (which needs to be setup for ECS)
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ecs/optimized-ami/amazon-linux-2/recommended/image_id
  KeyName:
    Description: Key name to use for login to main node
    Type: String
  MainNodeAMI:
    Description: AMI for the Main Node
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2
  CEvCPUs:
    Description: Max vCPUs in a single CE
    Type: Number
    Default: 500
  CEInstanceTypes:
    Type: String
    Default: c5.24xlarge,c5d.24xlarge,c5.18xlarge,c5d.18xlarge,c5n.18xlarge,c5.12xlarge,c5d.12xlarge,c5.4xlarge,c5d.4xlarge,c5n.4xlarge,c5a.24xlarge,c5a.16xlarge,c5a.4xlarge
  S3BucketName: 
    Type: String
  AllocationStrategy:
    Type: String
    Default: SPOT_CAPACITY_OPTIMIZED
  CEType:
    Type: String
    Default: SPOT

Resources:

  S3Policy:
    Type: AWS::IAM::Policy
    Properties: 
      PolicyName: VFS3Access
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action: 
              - s3:GetBucketLocation
              - s3:ListAllMyBuckets
            Resource: 'arn:aws:s3:::'
          - Effect: Allow
            Action: 's3:*'
            Resource: 
              - !Sub 'arn:aws:s3:::${S3BucketName}'
              - !Sub 'arn:aws:s3:::${S3BucketName}/*'
      Roles:
        - !Ref ECSTaskServiceRole
        - !Ref MainNodeRole

  BatchInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - batch.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSBatchServiceRole
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore

  ECSTaskServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore

  ECSTaskInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref ECSTaskServiceRole
      InstanceProfileName: !Sub ${AWS::StackName}-ECSTaskInstanceProfileIAM


  MainNodeRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSBatchFullAccess
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryPowerUser

  MainNodeInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref MainNodeRole
      InstanceProfileName: !Sub ${AWS::StackName}-MainNodeProfile


  BatchComputeEnvironment1:
    Type: AWS::Batch::ComputeEnvironment
    Properties:
      ComputeEnvironmentName: !Sub ${AWS::StackName}-CE1
      ComputeResources:
        AllocationStrategy: !Ref AllocationStrategy
        InstanceRole: !Ref ECSTaskInstanceProfile
        InstanceTypes: !Split [ ',',  !Ref CEInstanceTypes ]
        LaunchTemplate:
          LaunchTemplateId: !Ref BatchLaunchTemplate
          Version: $Latest
        MaxvCpus: !Ref CEvCPUs
        MinvCpus: 0
        DesiredvCpus: 0
        SecurityGroupIds:
          - Ref: BatchSecurityGroup
        Subnets: !Split
          - ',' 
          - Fn::ImportValue: 
              !Sub ${VPCStackParameter}-PrivateSubnets
        Type: !Ref CEType
      ServiceRole: !Ref BatchInstanceRole
      State: ENABLED
      Type: MANAGED

  BatchComputeEnvironment2:
    Type: AWS::Batch::ComputeEnvironment
    Properties:
      ComputeEnvironmentName: !Sub ${AWS::StackName}-CE2
      ComputeResources:
        AllocationStrategy: !Ref AllocationStrategy
        InstanceRole: !Ref ECSTaskInstanceProfile
        InstanceTypes: !Split [ ',',  !Ref CEInstanceTypes ]
        LaunchTemplate:
          LaunchTemplateId: !Ref BatchLaunchTemplate
          Version: $Latest
        MaxvCpus: !Ref CEvCPUs
        MinvCpus: 0
        DesiredvCpus: 0
        SecurityGroupIds:
          - Ref: BatchSecurityGroup
        Subnets:  !Split
          - ',' 
          - Fn::ImportValue: 
              !Sub ${VPCStackParameter}-PrivateSubnets
        Type: !Ref CEType
      ServiceRole: !Ref BatchInstanceRole
      State: ENABLED
      Type: MANAGED



  # Launch template
  BatchLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateData:
        ImageId: !Ref AMI

  ## Create the job queue and attach to the CE

  BatchJobQueue1:
    Type: AWS::Batch::JobQueue
    Properties:
      ComputeEnvironmentOrder:
        - ComputeEnvironment: !Ref BatchComputeEnvironment1
          Order: 1
        - ComputeEnvironment: !Ref BatchComputeEnvironment2
          Order: 1
      JobQueueName: !Sub ${AWS::StackName}-queue1
      Priority: 1
      State: ENABLED


     
  ## Create a job definition
  VFJobDefinition16:
    Type: AWS::Batch::JobDefinition
    Properties:
      JobDefinitionName: !Sub ${AWS::StackName}-jobdef16
      Type: Container
      ContainerProperties:
              Memory: 29000
              Vcpus: 16
              Image: !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${AWS::StackName}-ecr:latest"
      RetryStrategy:
              Attempts: 4
              EvaluateOnExit: 
                      - OnStatusReason: "Host EC2*"
                        Action: RETRY
                      - OnReason: "*"
                        Action: EXIT

  VFJobDefinition8:
    Type: AWS::Batch::JobDefinition
    Properties:
      JobDefinitionName: !Sub ${AWS::StackName}-jobdef8
      Type: Container
      ContainerProperties:
              Memory: 14000
              Vcpus: 8
              Image: !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${AWS::StackName}-ecr:latest"
      RetryStrategy:
              Attempts: 4
              EvaluateOnExit: 
                      - OnStatusReason: "Host EC2*"
                        Action: RETRY
                      - OnReason: "*"
                        Action: EXIT



  ## Create the ECR repo
  ContainerRepository:
    Type: AWS::ECR::Repository
    Properties: 
      RepositoryName: !Sub ${AWS::StackName}-ecr

  ## EC2 instance ##
  MainNode:
    Type: AWS::EC2::Instance
    Properties: 
      ImageId: !Ref MainNodeAMI
      InstanceType: c5.4xlarge
      KeyName: !Ref KeyName
      IamInstanceProfile: !Ref MainNodeInstanceProfile
      SecurityGroupIds: 
       - !Ref MainNodeSecurityGroup
      SubnetId: 
        Fn::ImportValue: 
          !Sub ${VPCStackParameter}-PublicSubnet1
      BlockDeviceMappings:
       - DeviceName: /dev/sda1
         Ebs:
           DeleteOnTermination: True
           VolumeSize: 8192
           VolumeType: gp2
      UserData:
         Fn::Base64: !Sub |
                Content-Type: multipart/mixed; boundary="===============1409001372156971182=="
                MIME-Version: 1.0

                --===============1409001372156971182==
                Content-Type: text/cloud-config; charset="us-ascii"
                MIME-Version: 1.0
                Content-Transfer-Encoding: 7bit
                Content-Disposition: attachment; filename="cloud-config"

                #cloud-config

                runcmd:
                - yum update -y --security
                - amazon-linux-extras install docker -y
                - amazon-linux-extras install epel -y
                - yum -y install python3 git patch xfsprogs parallel
                - pip3 install boto3
                - service docker start
                - usermod -a -G docker ec2-user
                - mkfs -t xfs /dev/nvme1n1
                - mkdir /data
                - sudo mount /dev/nvme1n1 /data
                - chown -R ec2-user /data 
                --===============1409001372156971182==

  ## Security Groups ##

  
  # Compute nodes / Batch can egress, but no ingress
  BatchSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Virtual Flow Batch"
      VpcId:  
        Fn::ImportValue: 
          !Sub ${VPCStackParameter}-VPC
      SecurityGroupEgress:
       - IpProtocol: tcp
         CidrIp: 0.0.0.0/0
         FromPort: 0
         ToPort: 9999

  # Allow only SSH access into the main node

  MainNodeSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "VirtualFlow Main node"
      VpcId:
        Fn::ImportValue: 
          !Sub ${VPCStackParameter}-VPC
      SecurityGroupIngress:
       - IpProtocol: tcp
         CidrIp: 0.0.0.0/0
         FromPort: 22
         ToPort: 22
      SecurityGroupEgress:
       - IpProtocol: tcp
         CidrIp: 0.0.0.0/0
         FromPort: 0
         ToPort: 9999



#############
## Outputs ##
#############
Outputs:
  MainNodePublicDNS:
    Value: !GetAtt MainNode.PublicDnsName
    Description: Public DNS name for the main node
    Export:
      Name: !Sub ${AWS::StackName}-MainNodePublicDNS
  

