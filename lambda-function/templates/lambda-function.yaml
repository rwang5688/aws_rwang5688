AWSTemplateFormatVersion: 2010-09-09
Description: Lambda Function and REST API Template

Parameters:
  LambdaFunctionName:
    Description: Lambda Function Name
    Type: String
    ConstraintDescription: Lambda Function Name
    AllowedPattern: "[a-zA-Z0-9]+[a-zA-Z0-9-]+[a-zA-Z0-9]+"
    Default: lambda-function
  LambdaFunctionDeploymentBucket:
    Description: Deployment Bucket Bame
    Type: String
    ConstraintDescription: Deployment Bucket Name
  LambdaFunctionDeploymentPackage:
    Description: Deployment Package Name
    Type: String
    ConstraintDescription: Deployment Package Name
  LambdaFunctionHandler:
    Description: Lambda Function Handler (Entry Point)
    Type: String
    ConstraintDescription: Lambda Function Handler (Entry Point)
    Default: lambda_function.lambda_handler
  RestApiName:
    Description: REST API Name
    Type: String
    ConstraintDescription: REST API Name
    Default: lambda-function-api
  RestApiMethodName:
    Description: REST API Method Name
    Type: String
    ConstraintDescription: REST API Method Name
    AllowedValues:
      - GET
      - POST
      - PUT
      - DELETE
    Default: GET
  RestApiStageName:
    Description: REST API Stage Name
    Type: String
    ConstraintDescription: REST API Stage Name
    AllowedValues:
      - dev
      - test
      - staging
      - prod
    Default: dev

Resources:
  LambdaIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  LambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${LambdaFunctionName}
      RetentionInDays: 90

  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Ref LambdaFunctionName
      Code:
        S3Bucket: !Ref LambdaFunctionDeploymentBucket
        S3Key: !Ref LambdaFunctionDeploymentPackage
      Description: Lambda Function
      Handler: !Ref LambdaFunctionHandler
      MemorySize: 128
      Role: !GetAtt LambdaIamRole.Arn
      Runtime: python3.8
      Timeout: 5
      TracingConfig:
        Mode: Active

  RestApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Description: REST API
      EndpointConfiguration:
        Types:
          - REGIONAL
      Name: !Ref RestApiName

  RestApiMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: !Ref RestApiMethodName
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaFunctionArn}/invocations
          - LambdaFunctionArn: !GetAtt LambdaFunction.Arn
      ResourceId: !GetAtt RestApi.RootResourceId
      RestApiId: !Ref RestApi

  RestApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - RestApiMethod
    Properties:
      RestApiId: !Ref RestApi
      StageName: !Ref RestApiStageName

  LambdaApiGatewayInvoke:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt LambdaFunction.Arn
      Principal: apigateway.amazonaws.com
      # note: if route *not* at API Gateway root, `SourceArn` would take the form of:
      #               arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApi}/${RestApiStageName}/${RestApiMethodName}/PATH_PART
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApi}/${RestApiStageName}/${RestApiMethodName}/

Outputs:
  LambdaFunctionArn:
    Description: Lambda Function ARN
    Value: !GetAtt LambdaFunction.Arn

  RestApiInvokeURL:
    Description: REST API Invoke URL
    Value: !Sub https://${RestApi}.execute-api.${AWS::Region}.amazonaws.com/${RestApiStageName}

