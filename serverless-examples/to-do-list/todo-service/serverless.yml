service: todo-service
frameworkVersion: ">=1.30.0"
plugins:
  - serverless-offline
  - serverless-domain-manager
  - serverless-dotenv-plugin
custom:
  region: ${env:AWS_DEFAULT_REGION, 'us-west-2'}
  accountid: ${env:AWS_ACCOUNT_ID}
  domain: ${env:TO_DO_LIST_DOMAIN}
  dotenv:
    path: ../default-environment.env
  customDomain:
    domainName: 'todolistapi.${self:custom.domain}'
    stage: ${self:provider.stage}
    basePath: api
    certificateName: '*.${self:custom.domain}'
    createRoute53Record: true
    endpointType: regional
  serverless-offline:
    port: 3000

provider:
  name: aws
  runtime: nodejs12.x
  stage: ${opt:stage, 'dev'}
  region: ${env:AWS_DEFAULT_REGION, 'us-west-2'}
  environment:
    TODO_TABLE: '${self:service}-${self:provider.stage}'
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${self:custom.region}:${self:custom.accountid}:*"

functions:
  create:
    handler: handler.create
    events:
      - http:
          method: POST
          path: todo
          cors: true
  read:
    handler: handler.read
    events:
      - http:
          method: GET
          path: todo/{id}
          cors: true
  update:
    handler: handler.update
    events:
      - http:
          method: PUT
          path: todo/{id}
          cors: true
  delete:
    handler: handler.del
    events:
      - http:
          method: DELETE
          path: todo/{id}
          cors: true
  list:
    handler: handler.list
    events:
      - http:
          method: GET
          path: todo
          cors: true

resources:
  - ${file(./dynamodb.yml)}
