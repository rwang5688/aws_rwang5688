AWSTemplateFormatVersion: 2010-09-09
Description: AWS resources for mindLAMP Platform

Parameters:
  VpcName:
    Description: VPC Name
    Type: String
    ConstraintDescription: Provide VPC name
    Default: 'wangrob-vpc-01'
  VpcCidrBlock:
    Type: String
    Description: VPC CIDR block
    AllowedPattern: '^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$'
    Default: '10.0.0.0/16'

  PublicSubnet01AvailabilityZone:
    Description: Public Subnet 01 Availability Zone
    Type: String
    ConstraintDescription: Provide Public Subnet 01 availability zone
  PublicSubnet01CidrBlock:
    Type: String
    Description: Subnet CIDR block
    AllowedPattern: '^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$'
    ConstraintDescription: Provide CIDR block for Public Subnet 01
    Default: '10.0.1.0/24'

  PrivateSubnet01AvailabilityZone:
    Description: Private Subnet 01 Availability Zone
    Type: String
    ConstraintDescription: Provide Private Subnet 01 availability zone
  PrivateSubnet01CidrBlock:
    Type: String
    Description: Subnet CIDR block
    AllowedPattern: '^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$'
    ConstraintDescription: Provide CIDR block for Private Subnet 01
    Default: '10.0.2.0/24'

  PublicSubnet02AvailabilityZone:
    Description: Public Subnet 02 Availability Zone
    Type: String
    ConstraintDescription: Provide Public Subnet 02 availability zone
  PublicSubnet02CidrBlock:
    Type: String
    Description: Subnet CIDR block
    AllowedPattern: '^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$'
    ConstraintDescription: Provide CIDR block for Public Subnet 02
    Default: '10.0.3.0/24'

  PrivateSubnet02AvailabilityZone:
    Description: Private Subnet 02 Availability Zone
    Type: String
    ConstraintDescription: Provide Private Subnet 02 availability zone
  PrivateSubnet02CidrBlock:
    Type: String
    Description: Subnet CIDR block
    AllowedPattern: '^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$'
    ConstraintDescription: Provide CIDR block for Private Subnet 02
    Default: '10.0.4.0/24'

  SshCidrBlock:
    Type: String
    Description: SSH CIDR Block from Admin Desktop
    AllowedPattern: '^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$'
    ConstraintDescription: Provide CIDR block for SSH from admin desktop

  ImageId:
    Description: AMI image id
    Type: String
    ConstraintDescription: Get AMI image id from Launch Instance catalog
  InstanceType:
    Description: EC2 instance type
    Type: String
    AllowedValues: [a1.2xlarge, a1.4xlarge, a1.large, a1.medium, a1.metal, 
    a1.xlarge, c1.medium, c1.xlarge, c3.2xlarge, c3.4xlarge, c3.8xlarge, 
    c3.large, c3.xlarge, c4.2xlarge, c4.4xlarge, c4.8xlarge, c4.large, c4.xlarge, 
    c5.12xlarge, c5.18xlarge, c5.24xlarge, c5.2xlarge, c5.4xlarge, c5.9xlarge, 
    c5.large, c5.metal, c5.xlarge, c5d.12xlarge, c5d.18xlarge, c5d.24xlarge, 
    c5d.2xlarge, c5d.4xlarge, c5d.9xlarge, c5d.large, c5d.metal, c5d.xlarge, 
    c5n.18xlarge, c5n.2xlarge, c5n.4xlarge, c5n.9xlarge, c5n.large, c5n.xlarge, 
    cc1.4xlarge, cc2.8xlarge, cg1.4xlarge, cr1.8xlarge, d2.2xlarge, d2.4xlarge, 
    d2.8xlarge, d2.xlarge, f1.16xlarge, f1.2xlarge, f1.4xlarge, g2.2xlarge, 
    g2.8xlarge, g3.16xlarge, g3.4xlarge, g3.8xlarge, g3s.xlarge, g4dn.12xlarge, 
    g4dn.16xlarge, g4dn.2xlarge, g4dn.4xlarge, g4dn.8xlarge, g4dn.xlarge, 
    h1.16xlarge, h1.2xlarge, h1.4xlarge, h1.8xlarge, hi1.4xlarge, hs1.8xlarge, 
    i2.2xlarge, i2.4xlarge, i2.8xlarge, i2.xlarge, i3.16xlarge, i3.2xlarge, 
    i3.4xlarge, i3.8xlarge, i3.large, i3.metal, i3.xlarge, i3en.12xlarge, 
    i3en.24xlarge, i3en.2xlarge, i3en.3xlarge, i3en.6xlarge, i3en.large, 
    i3en.metal, i3en.xlarge, inf1.24xlarge, inf1.2xlarge, inf1.6xlarge, inf1.xlarge, 
    m1.large, m1.medium, m1.small, m1.xlarge, m2.2xlarge, m2.4xlarge, m2.xlarge, 
    m3.2xlarge, m3.large, m3.medium, m3.xlarge, m4.10xlarge, m4.16xlarge, 
    m4.2xlarge, m4.4xlarge, m4.large, m4.xlarge, m5.12xlarge, m5.16xlarge, 
    m5.24xlarge, m5.2xlarge, m5.4xlarge, m5.8xlarge, m5.large, m5.metal, m5.xlarge, 
    m5a.12xlarge, m5a.16xlarge, m5a.24xlarge, m5a.2xlarge, m5a.4xlarge, 
    m5a.8xlarge, m5a.large, m5a.xlarge, m5ad.12xlarge, m5ad.16xlarge, m5ad.24xlarge, 
    m5ad.2xlarge, m5ad.4xlarge, m5ad.8xlarge, m5ad.large, m5ad.xlarge, m5d.12xlarge, 
    m5d.16xlarge, m5d.24xlarge, m5d.2xlarge, m5d.4xlarge, m5d.8xlarge, m5d.large, 
    m5d.metal, m5d.xlarge, m5dn.12xlarge, m5dn.16xlarge, m5dn.24xlarge, m5dn.2xlarge, 
    m5dn.4xlarge, m5dn.8xlarge, m5dn.large, m5dn.xlarge, m5n.12xlarge, m5n.16xlarge, 
    m5n.24xlarge, m5n.2xlarge, m5n.4xlarge, m5n.8xlarge, m5n.large, m5n.xlarge, 
    p2.16xlarge, p2.8xlarge, p2.xlarge, p3.16xlarge, p3.2xlarge, p3.8xlarge, 
    p3dn.24xlarge, r3.2xlarge, r3.4xlarge, r3.8xlarge, r3.large, r3.xlarge, 
    r4.16xlarge, r4.2xlarge, r4.4xlarge, r4.8xlarge, r4.large, r4.xlarge, r5.12xlarge, 
    r5.16xlarge, r5.24xlarge, r5.2xlarge, r5.4xlarge, r5.8xlarge, r5.large, 
    r5.metal, r5.xlarge, r5a.12xlarge, r5a.16xlarge, r5a.24xlarge, r5a.2xlarge, 
    r5a.4xlarge, r5a.8xlarge, r5a.large, r5a.xlarge, r5ad.12xlarge, r5ad.16xlarge, 
    r5ad.24xlarge, r5ad.2xlarge, r5ad.4xlarge, r5ad.8xlarge, r5ad.large, 
    r5ad.xlarge, r5d.12xlarge, r5d.16xlarge, r5d.24xlarge, r5d.2xlarge, r5d.4xlarge, 
    r5d.8xlarge, r5d.large, r5d.metal, r5d.xlarge, r5dn.12xlarge, r5dn.16xlarge, 
    r5dn.24xlarge, r5dn.2xlarge, r5dn.4xlarge, r5dn.8xlarge, r5dn.large, r5dn.xlarge, 
    r5n.12xlarge, r5n.16xlarge, r5n.24xlarge, r5n.2xlarge, r5n.4xlarge, r5n.8xlarge, 
    r5n.large, r5n.xlarge, t1.micro, t2.2xlarge, t2.large, t2.medium, t2.micro, 
    t2.nano, t2.small, t2.xlarge, t3.2xlarge, t3.large, t3.medium, t3.micro, t3.nano, 
    t3.small, t3.xlarge, t3a.2xlarge, t3a.large, t3a.medium, t3a.micro, t3a.nano, 
    t3a.small, t3a.xlarge, u-12tb1.metal, u-18tb1.metal, u-24tb1.metal, u-6tb1.metal, 
    u-9tb1.metal, x1.16xlarge, x1.32xlarge, x1e.16xlarge, x1e.2xlarge, x1e.32xlarge, 
    x1e.4xlarge, x1e.8xlarge, x1e.xlarge, z1d.12xlarge, z1d.2xlarge, z1d.3xlarge, 
    z1d.6xlarge, z1d.large, z1d.metal, z1d.xlarge]
    ConstraintDescription: must be a valid EC2 instance type.
    Default: 't3.medium'
  KeyPair:
    Description: SSH key pair Name
    Type: 'AWS::EC2::KeyPair::KeyName'
    ConstraintDescription: Provide the name of an existing SSH key pair
  Ec2Instance01Name:
    Description: EC2 Instance 01 Name
    Type: String
    ConstraintDescription: Provide EC2 instance name
    Default: 'wangrob-vpc-01-ec2-01'
  Ec2Instance02Name:
    Description: EC2 Instance 02 Name
    Type: String
    ConstraintDescription: Provide EC2 instance name
    Default: 'wangrob-vpc-01-ec2-02'

  HostedZoneId:
    Description: Hosted zone id
    Type: String
    ConstraintDescription: Provide hosted zone id
  DomainName:
    Description: Domain name
    Type: String
    ConstraintDescription: Provide domain name

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidrBlock
      EnableDnsSupport: 'false'
      EnableDnsHostnames: 'false'
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: !Ref VpcName

  PublicSubnet01:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      AvailabilityZone: !Ref PublicSubnet01AvailabilityZone
      CidrBlock: !Ref PublicSubnet01CidrBlock
      MapPublicIpOnLaunch: 'True'
      Tags:
        - Key: Name
          Value: !Sub "${VpcName}-public-subnet-01"
  PrivateSubnet01:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      AvailabilityZone: !Ref PrivateSubnet01AvailabilityZone
      CidrBlock: !Ref PrivateSubnet01CidrBlock
      MapPublicIpOnLaunch: 'False'
      Tags:
        - Key: Name
          Value: !Sub "${VpcName}-private-subnet-01"

  PublicSubnet02:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      AvailabilityZone: !Ref PublicSubnet02AvailabilityZone
      CidrBlock: !Ref PublicSubnet02CidrBlock
      MapPublicIpOnLaunch: 'True'
      Tags:
        - Key: Name
          Value: !Sub "${VpcName}-public-subnet-02"
  PrivateSubnet02:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      AvailabilityZone: !Ref PrivateSubnet02AvailabilityZone
      CidrBlock: !Ref PrivateSubnet02CidrBlock
      MapPublicIpOnLaunch: 'False'
      Tags:
        - Key: Name
          Value: !Sub "${VpcName}-private-subnet-02"

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VPC
      Tags:
        - Key: Name
          Value: !Sub "${VpcName}-public-rt"
  PublicSubnet01RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: PublicRouteTable
      SubnetId:
        Ref: PublicSubnet01
  PublicSubnet02RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: PublicRouteTable
      SubnetId:
        Ref: PublicSubnet02

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VPC
      Tags:
        - Key: Name
          Value: !Sub "${VpcName}-private-rt"
  PrivateSubnet01RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: PrivateRouteTable
      SubnetId:
        Ref: PrivateSubnet01
  PrivateSubnet02RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: PrivateRouteTable
      SubnetId:
        Ref: PrivateSubnet02

  InternetGateway:
    Type: AWS::EC2::InternetGateway
  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId:
        Ref: VPC
      InternetGatewayId:
        Ref: InternetGateway
  InternetGatewayRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: InternetGateway

  PublicSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId:
        Ref: VPC
      GroupDescription: 'Public Security Group'
      Tags:
        - Key: Name
          Value: !Sub "${VpcName}-public-sg"
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: !Ref SshCidrBlock
        Description: 'SSH from Admin Desktop'
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
        Description: 'HTTP IPv4'
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIpv6: ::/0
        Description: 'HTTP IPv6'
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp: 0.0.0.0/0
        Description: 'HTTPS IPv4'
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIpv6: ::/0
        Description: 'HTTPS IPv6'
  PublicSecurityGroupIngress03:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: 
        Ref: PublicSecurityGroup
      IpProtocol: tcp
      FromPort: 2375
      ToPort: 2375
      SourceSecurityGroupId: !Ref PublicSecurityGroup
      Description: 'Docker Daemon'
  PublicSecurityGroupIngress04:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: 
        Ref: PublicSecurityGroup
      IpProtocol: tcp
      FromPort: 2376
      ToPort: 2376
      SourceSecurityGroupId: !Ref PublicSecurityGroup
      Description: 'Docker Machine'
  PublicSecurityGroupIngress05:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: 
        Ref: PublicSecurityGroup
      IpProtocol: tcp
      FromPort: 2377
      ToPort: 2377
      SourceSecurityGroupId: !Ref PublicSecurityGroup
      Description: 'Docker Swarm'
  PublicSecurityGroupIngress06:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: 
        Ref: PublicSecurityGroup
      IpProtocol: tcp
      FromPort: 7946
      ToPort: 7946
      SourceSecurityGroupId: !Ref PublicSecurityGroup
      Description: 'Docker Swarm'
  PublicSecurityGroupIngress07:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: 
        Ref: PublicSecurityGroup
      IpProtocol: udp
      FromPort: 7946
      ToPort: 7946
      SourceSecurityGroupId: !Ref PublicSecurityGroup
      Description: 'Docker Swarm'
  PublicSecurityGroupIngress08:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: 
        Ref: PublicSecurityGroup
      IpProtocol: udp
      FromPort: 4789
      ToPort: 4789
      SourceSecurityGroupId: !Ref PublicSecurityGroup
      Description: 'Docker Overlay'

  PrivateSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId:
        Ref: VPC
      GroupDescription: 'Private Security Group'
      Tags:
        - Key: Name
          Value: !Sub "${VpcName}-private-sg"      

  IamInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
      - Ref: Ec2InstanceRole
  Ec2InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2008-10-17'
        Statement:
        - Sid: ''
          Effect: Allow
          Principal:
            Service: ec2.amazonaws.com
          Action: sts:AssumeRole
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM
      - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
      - arn:aws:iam::aws:policy/AmazonS3FullAccess
      - arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess

  Ec2Instance01:
    Type: AWS::EC2::Instance
    Properties:
      BlockDeviceMappings: 
        - DeviceName: /dev/xvda
          Ebs: 
            Encrypted: false
            VolumeSize: 30
            VolumeType: gp2
            DeleteOnTermination: true
        - DeviceName: /dev/sdf
          Ebs: 
            Encrypted: true
            VolumeSize: 4096
            VolumeType: gp2
            DeleteOnTermination: false
      EbsOptimized: true
      IamInstanceProfile: !Ref IamInstanceProfile
      ImageId: !Ref ImageId
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyPair
      SecurityGroupIds:
        - Ref: PublicSecurityGroup
      SourceDestCheck: true
      SubnetId: !Ref PublicSubnet01
      Tags:
        - Key: Name
          Value: !Ref Ec2Instance01Name
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          # install and start Apache
          yum update -y
          yum install -y httpd
          cd /var/www/html
          echo "<html><h1>Hello World from ${Ec2Instance01Name}.</h1></html>" > index.html
          service httpd start
          chkconfig httpd on
          # install and start Docker Swarm
          yum install -y docker
          usermod -a -G docker ec2-user
          hostnamectl set-hostname ${DomainName}
          mkdir /etc/systemd/system/docker.service.d
          printf "[Service]\nExecStart=\nExecStart=/usr/bin/dockerd -H tcp://0.0.0.0:2375 -H fd:// --containerd=/run/containerd/containerd.sock\n" | tee /etc/systemd/system/docker.service.d/override.conf
          systemctl daemon-reload
          service docker restart
          docker swarm init
          # install CloudWatch monitoring scripts
          yum install -y perl-Switch perl-DateTime perl-Sys-Syslog perl-LWP-Protocol-https perl-Digest-SHA.x86_64
          cd /home/ec2-user/
          curl https://aws-cloudwatch.s3.amazonaws.com/downloads/CloudWatchMonitoringScripts-1.2.2.zip -O
          unzip CloudWatchMonitoringScripts-1.2.2.zip
          rm -rf CloudWatchMonitoringScripts-1.2.2.zip

  Ec2Instance02:
    Type: AWS::EC2::Instance
    Properties:
      BlockDeviceMappings: 
        - DeviceName: /dev/xvda
          Ebs: 
            Encrypted: false
            VolumeSize: 30
            VolumeType: gp2
            DeleteOnTermination: true
        - DeviceName: /dev/sdf
          VirtualName: ephemeral0
      EbsOptimized: true
      IamInstanceProfile: !Ref IamInstanceProfile
      ImageId: !Ref ImageId
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyPair
      SecurityGroupIds:
        - Ref: PublicSecurityGroup
      SourceDestCheck: true
      SubnetId: !Ref PublicSubnet02
      Tags:
        - Key: Name
          Value: !Ref Ec2Instance02Name
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          # install and start Apache
          yum update -y
          yum install -y httpd
          cd /var/www/html
          echo "<html><h1>Hello World from ${Ec2Instance02Name}.</h1></html>" > index.html
          service httpd start
          chkconfig httpd on
          # install and start Docker Swarm
          yum install -y docker
          usermod -a -G docker ec2-user
          hostnamectl set-hostname ${DomainName}
          mkdir /etc/systemd/system/docker.service.d
          printf "[Service]\nExecStart=\nExecStart=/usr/bin/dockerd -H tcp://0.0.0.0:2375 -H fd:// --containerd=/run/containerd/containerd.sock\n" | tee /etc/systemd/system/docker.service.d/override.conf
          systemctl daemon-reload
          service docker restart
          docker swarm init
          # install CloudWatch monitoring scripts
          yum install -y perl-Switch perl-DateTime perl-Sys-Syslog perl-LWP-Protocol-https perl-Digest-SHA.x86_64
          cd /home/ec2-user/
          curl https://aws-cloudwatch.s3.amazonaws.com/downloads/CloudWatchMonitoringScripts-1.2.2.zip -O
          unzip CloudWatchMonitoringScripts-1.2.2.zip
          rm -rf CloudWatchMonitoringScripts-1.2.2.zip

  EIP01:
    Type: AWS::EC2::EIP
    Properties:
      InstanceId: !Ref Ec2Instance01

  EIP02:
    Type: AWS::EC2::EIP
    Properties:
      InstanceId: !Ref Ec2Instance02

  DNSEntries:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneId: !Ref HostedZoneId
      RecordSets:
        - Name: !Ref DomainName
          Type: A
          TTL: 300
          MultiValueAnswer: true
          SetIdentifier: node-01
          ResourceRecords: 
            - !Ref EIP01
        - Name: !Ref DomainName
          Type: A
          TTL: 300
          MultiValueAnswer: true
          SetIdentifier: node-02
          ResourceRecords: 
            - !Ref EIP02
        - Name: !Sub "*.${DomainName}"
          Type: A
          TTL: 300
          MultiValueAnswer: true
          SetIdentifier: node-01
          ResourceRecords: 
            - !Ref EIP01
        - Name: !Sub "*.${DomainName}"
          Type: A
          TTL: 300
          MultiValueAnswer: true
          SetIdentifier: node-02
          ResourceRecords: 
            - !Ref EIP02
        - Name: !Sub "node-01.${DomainName}"
          Type: A
          TTL: 300
          MultiValueAnswer: true
          SetIdentifier: node-01
          ResourceRecords: 
            - !Ref EIP01
        - Name: !Sub "node-02.${DomainName}"
          Type: A
          TTL: 300
          MultiValueAnswer: true
          SetIdentifier: node-02
          ResourceRecords: 
            - !Ref EIP02

Outputs:
  Ec2Instance01Id:
    Description: EC2 Instance 01 Id
    Value: !Ref Ec2Instance01
  Ec2Instance02Id:
    Description: EC2 Instance 02 Id
    Value: !Ref Ec2Instance02
  EIP01:
    Description: Elastic IP 01
    Value: !Ref EIP01
  EIP02:
    Description: Elastic IP 02
    Value: !Ref EIP02

